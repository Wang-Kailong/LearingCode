

#include <windows.h>
#include <string>
#include <cstdlib>
#include <ctime>
#include <sstream>

class Weapon {
private:
    int attackMin;
    int attackMax;
    int wear;

public:
    Weapon(int min, int max, int wear) : attackMin(min), attackMax(max), wear(wear) {}
    Weapon(const Weapon& other) : attackMin(other.attackMin), attackMax(other.attackMax), wear(other.wear) {}
    ~Weapon() {}

    int attack() {
        int attackValue = attackMin + (std::rand() % (attackMax - attackMin + 1));
        return attackValue * (100 - wear) / 100;
    }

    std::string display() const {
        std::stringstream ss;
        ss << "Weapon[Min: " << attackMin << ", Max: " << attackMax << ", Wear: " << wear << "]";
        return ss.str();
    }
};

class Warrior {
private:
    std::string name;
    int attackValue;
    int defenseValue;
    int health;
    bool defending;
    Weapon weapon;

public:
    Warrior(std::string name, int attack, int defense, int health, Weapon weapon)
        : name(name), attackValue(attack), defenseValue(defense), health(health), defending(false), weapon(weapon) {}

    Warrior(const Warrior& other)
        : name(other.name), attackValue(other.attackValue), defenseValue(other.defenseValue),
        health(other.health), defending(other.defending), weapon(other.weapon) {}

    ~Warrior() {}

    void useWeapon(Warrior& opponent) {
        int attackPoints = weapon.attack() * attackValue / 100;
        opponent.takeDamage(attackPoints);
    }

    void defend() {
        defending = true;
    }

    void takeDamage(int damage) {
        if (defending) {
            damage = damage * (100 - defenseValue) / 100;
        }
        health -= damage;
        if (health < 0) health = 0;
    }

    void resetDefense() {
        defending = false;
    }

    bool isAlive() const {
        return health > 0;
    }

    std::string display() const {
        std::stringstream ss;
        ss << "Warrior[Name: " << name << ", Attack: " << attackValue << ", Defense: " << defenseValue
            << ", Health: " << health << ", Defending: " << (defending ? "Yes" : "No") << "]\n"
            << weapon.display();
        return ss.str();
    }

    void play(Warrior& opponent, int choice) {
        switch (choice) {
        case 1:
            useWeapon(opponent);
            break;
        case 2:
            defend();
            break;
        default:
            useWeapon(opponent);
            break;
        }
    }
};

// 全局变量
Warrior warrior1("Warrior1", 60, 40, 100, Weapon(10, 20, 5));
Warrior warrior2("Warrior2", 50, 50, 100, Weapon(15, 25, 7));
HWND hwndStatus;

void UpdateStatus() {
    std::string status = warrior1.display() + "\n\n" + warrior2.display();
    SetWindowText(hwndStatus, status.c_str());
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_CREATE: {
        hwndStatus = CreateWindow("STATIC", "",
            WS_CHILD | WS_VISIBLE | SS_LEFT,
            10, 10, 400, 200,
            hwnd, NULL, NULL, NULL);

        CreateWindow("BUTTON", "Warrior1 Attack",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
            10, 220, 150, 30,
            hwnd, (HMENU)1, NULL, NULL);

        CreateWindow("BUTTON", "Warrior1 Defend",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
            170, 220, 150, 30,
            hwnd, (HMENU)2, NULL, NULL);

        CreateWindow("BUTTON", "Warrior2 Attack",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
            10, 260, 150, 30,
            hwnd, (HMENU)3, NULL, NULL);

        CreateWindow("BUTTON", "Warrior2 Defend",
            WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
            170, 260, 150, 30,
            hwnd, (HMENU)4, NULL, NULL);

        UpdateStatus();
        break;
    }
    case WM_COMMAND: {
        switch (LOWORD(wParam)) {
        case 1:
            warrior1.play(warrior2, 1);
            warrior1.resetDefense();
            break;
        case 2:
            warrior1.play(warrior2, 2);
            break;
        case 3:
            warrior2.play(warrior1, 1);
            warrior2.resetDefense();
            break;
        case 4:
            warrior2.play(warrior1, 2);
            break;
        }

        if (!warrior2.isAlive()) {
            MessageBox(hwnd, "Warrior1 wins!", "Result", MB_OK);
        }
        else if (!warrior1.isAlive()) {
            MessageBox(hwnd, "Warrior2 wins!", "Result", MB_OK);
        }
        else {
            UpdateStatus();
        }
        break;
    }
    case WM_DESTROY: {
        PostQuitMessage(0);
        break;
    }
    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
    return 0;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    std::srand(std::time(0));

    const char CLASS_NAME[] = "WarriorBattleClass";
    WNDCLASS wc = {};

    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;

    RegisterClass(&wc);

    HWND hwnd = CreateWindowEx(
        0,
        CLASS_NAME,
        "Warrior Battle",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 600, 400,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) {
        return 0;
    }

    ShowWindow(hwnd, nCmdShow);

    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}
